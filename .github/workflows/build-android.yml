name: Build Android APK

on:
  push:
    branches: 
      - main
  pull_request:
    branches:
      - main

env:
  # Cache key for Gradle dependencies
  GRADLE_CACHE_KEY: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

jobs:
  build-apk:
    runs-on: ubuntu-latest
    
    steps:
      # 1. Check out the repository code
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for proper versioning

      # 2. Set up Java (JDK) for Android builds
      - name: Setup Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      # 3. Set up Node.js for Capacitor CLI
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'

      # 4. Cache Gradle dependencies for faster builds
      - name: Cache Gradle Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            android/.gradle
          key: ${{ env.GRADLE_CACHE_KEY }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # 5. Install Capacitor dependencies from package.json
      - name: Install Node Dependencies
        run: npm ci

      # 6. Verify the 'out' folder exists (optional check)
      - name: Verify Web Assets
        run: |
          if [ ! -d "out" ]; then
            echo "Warning: 'out' folder not found. Make sure your web build step ran first."
            exit 1
          fi
          echo "Web assets found in 'out' folder"

      # 7. Sync the web assets ('out' folder) into the native Android project
      - name: Capacitor Sync
        run: npx cap sync android

      # 8. Make gradlew executable
      - name: Make Gradlew Executable
        run: chmod +x android/gradlew

      # 9. Build the Debug APK using Gradle
      - name: Build Debug APK
        working-directory: android
        run: ./gradlew assembleDebug --no-daemon --stacktrace

      # 10. Build Release APK (optional, for production builds)
      - name: Build Release APK
        working-directory: android
        run: ./gradlew assembleRelease --no-daemon --stacktrace
        continue-on-error: true  # Allow to fail if signing is not configured

      # 11. List generated APK files for debugging
      - name: List APK Files
        run: find android/app/build/outputs/apk -name "*.apk" -type f

      # 12. Upload Debug APK artifact
      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: android/app/build/outputs/apk/debug/app-debug.apk
          retention-days: 30

      # 13. Upload Release APK artifact (if it was built successfully)
      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: app-release-apk
          path: android/app/build/outputs/apk/release/app-release-unsigned.apk
          retention-days: 90
        continue-on-error: true

      # 14. Create a summary with download links
      - name: Build Summary
        run: |
          echo "## ðŸ“± Android Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… **Debug APK**: Successfully built and uploaded as artifact" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ“¥ Download Instructions:" >> $GITHUB_STEP_SUMMARY
          echo "1. Go to the **Actions** tab in your repository" >> $GITHUB_STEP_SUMMARY
          echo "2. Click on this workflow run" >> $GITHUB_STEP_SUMMARY
          echo "3. Scroll down to **Artifacts** section" >> $GITHUB_STEP_SUMMARY
          echo "4. Download the APK file(s)" >> $GITHUB_STEP_SUMMARY
